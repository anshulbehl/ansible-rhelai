---
- name: Find existing instance
  amazon.aws.ec2_instance_info:
    filters:
      tag:Name: "{{ rhelai_aws_resource_name }}-instance"
    region: "{{ rhelai_aws_aws_region }}"
  register: instance_info

- name: Terminate instance (if found)
  amazon.aws.ec2_instance:
    instance_ids: "{{ instance_info.instances | map(attribute='instance_id') | list }}"
    region: "{{ rhelai_aws_aws_region }}"
    state: absent
    wait: true
  when: instance_info.instances is defined and instance_info.instances|length > 0

- name: Find security group
  amazon.aws.ec2_security_group_info:
    filters:
      group-name: "{{ rhelai_aws_resource_name }}-sg"
    region: "{{ rhelai_aws_aws_region }}"
  register: sg_info

- name: Delete security group (if found)
  amazon.aws.ec2_security_group:
    group_id: "{{ sg_info.security_groups[0].group_id }}"
    region: "{{ rhelai_aws_aws_region }}"
    state: absent
  when: sg_info.security_groups is defined and sg_info.security_groups|length > 0

- name: Find subnet
  amazon.aws.ec2_vpc_subnet_info:
    filters:
      tag:Name: "{{ rhelai_aws_resource_name }}-subnet"
    region: "{{ rhelai_aws_aws_region }}"
  register: subnet_info

- name: Find VPC
  amazon.aws.ec2_vpc_net_info:
    filters:
      tag:Name: "{{ rhelai_aws_resource_name }}-vpc"
    region: "{{ rhelai_aws_aws_region }}"
  register: vpc_info

- name: Delete subnet (if found)
  amazon.aws.ec2_vpc_subnet:
    state: absent
    vpc_id: "{{ vpc_info.vpcs[0].id }}"
    cidr: "{{ rhelai_aws_subnet_cidr }}"
    region: "{{ rhelai_aws_aws_region }}"
  when: subnet_info.subnets is defined and subnet_info.subnets|length > 0

- name: Detach and Delete IGW
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc_info.vpcs[0].id }}"
    region: "{{ rhelai_aws_aws_region }}"
    state: absent
  when: vpc_info.vpcs | length > 0

- name: Delete route tables
  when: vpc_info.vpcs | length > 0
  block:
    - name: Get all route tables in the VPC
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].id }}"
        region: "{{ rhelai_aws_aws_region }}"
      register: route_tables
      when: vpc_info.vpcs | length > 0

    - name: VPC public subnet route table is deleted
      amazon.aws.ec2_vpc_route_table:
        region: "{{ rhelai_aws_aws_region }}"
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
        route_table_id: "{{ item.id }}"
        lookup: id
        state: absent
      with_items: "{{ route_tables.route_tables }}"
      when: item.associations == []

    - name: Delete all non-main route tables in the VPC
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ item.route_table_id }}"
        region: "{{ rhelai_aws_aws_region }}"
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
        state: absent
      loop: "{{ route_tables.route_tables }}"
      when: not item.associations | selectattr('main', 'defined') | selectattr('main', 'equalto', true) | list

- name: Delete VPC (if found)
  amazon.aws.ec2_vpc_net:
    state: absent
    vpc_id: "{{ vpc_info.vpcs[0].id }}"
    region: "{{ rhelai_aws_aws_region }}"
  when: vpc_info.vpcs is defined and vpc_info.vpcs|length > 0

- name: Remove AWS key pair
  amazon.aws.ec2_key:
    name: "{{ rhelai_aws_resource_name }}"
    region: "{{ rhelai_aws_aws_region }}"
    state: absent

- name: Remove local private key file
  ansible.builtin.file:
    path: "{{ rhelai_aws_local_ssh_key_path }}"
    state: absent

- name: Remove local public key file
  ansible.builtin.file:
    path: "{{ rhelai_aws_local_ssh_key_path }}.pub"
    state: absent
